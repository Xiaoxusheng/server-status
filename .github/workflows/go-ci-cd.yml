name: Build Go Multi-Platform

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  BINARY_NAME: secure-download-server
  BUILD_VERSION: ${{ github.ref_name }}
  GO_VERSION: '1.24.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run tests
        run: |
          go test ./... -v

      - name: Run security audit
        run: |
          go mod download
          go list -json -m all | go run golang.org/x/vuln/cmd/govulncheck@latest -json ./...

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            target: linux-arm64
            goos: linux
            goarch: arm64
          - os: windows-latest
            target: windows-amd64
            goos: windows
            goarch: amd64
            ext: .exe
          - os: macos-latest
            target: darwin-amd64
            goos: darwin
            goarch: amd64
          - os: macos-latest
            target: darwin-arm64
            goos: darwin
            goarch: arm64

    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        run: |
          mkdir -p dist
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 go build \
            -ldflags="-w -s -X main.version=${{ env.BUILD_VERSION }} -X main.commit=${{ github.sha }} -X main.buildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            -o dist/${{ env.BINARY_NAME }}${{ matrix.ext || '' }} \
            ./cmd/server

      - name: Create checksum
        run: |
          cd dist
          shasum -a 256 ${{ env.BINARY_NAME }}${{ matrix.ext || '' }} > ${{ env.BINARY_NAME }}-${{ matrix.target }}-${{ env.BUILD_VERSION }}.sha256

      - name: Create archive
        run: |
          cd dist
          if [ "${{ matrix.goos }}" = "windows" ]; then
            7z a ${{ env.BINARY_NAME }}-${{ matrix.target }}-${{ env.BUILD_VERSION }}.zip ${{ env.BINARY_NAME }}${{ matrix.ext || '' }} *.sha256
          else
            tar czf ${{ env.BINARY_NAME }}-${{ matrix.target }}-${{ env.BUILD_VERSION }}.tar.gz ${{ env.BINARY_NAME }}${{ matrix.ext || '' }} *.sha256
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: dist/${{ env.BINARY_NAME }}-${{ matrix.target }}-${{ env.BUILD_VERSION }}.*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.sha256
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}